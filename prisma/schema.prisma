// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String      @id @default(cuid())
  name        String
  userId      String
  description String?
  instaUrl    String?
  facebookUrl String?
  contactNo   String?
  address     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Billboards  Billboard[] @relation("StoreToBillboard")
  Categories  Category[]
  sizes       Size[]
  colors      Color[]
  products    Product[]
  orders      Order[]
}

model Billboard {
  id          String     @id @default(cuid())
  storeId     String
  store       Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  toShowLabel Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Categories  Category[]
  images      Image[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  Billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[]
}

model Size {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Color {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Int
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  quantity   Int         @default(1)
}

model Image {
  id          String     @id @default(cuid())
  productId   String?
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  billboardId String?
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id             String      @id @default(cuid())
  storeId        String
  store          Store       @relation(fields: [storeId], references: [id])
  orderItems     OrderItem[]
  isPaid         Boolean     @default(false)
  phone          String      @default("")
  customerName   String      @default("")
  deliveyAddress String?
  orderStatus    OrderStatus @default(PENDING)
  orderType      OrderType   @default(ONLINE)
  subTotal       Int         @default(0) // Total before tax and discounts
  tax            Int         @default(0) // Tax amount
  discount       Int         @default(0) // Discount amount
  total          Int         @default(0) // Final total after tax and discounts
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderType {
  IN_STORE
  ONLINE
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  DELIVERED
}
